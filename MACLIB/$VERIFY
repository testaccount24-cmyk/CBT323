         MACRO
.*
.**********************************************************************
.*                                                                    *
.* Component_Type: MVS HL-Assembler Macro                             *
.*    Description: Verifying data types                               *
.*         Author: Gerard J Nicol                                     *
.*           Date: September 1997                                     *
.*                                                                    *
.*--+----1----+----2----+----3----+----4----+----5----+----6----+----7* --+----8
.*
&LABEL   $VERIFY &TYPE,                 -LENGTH,LIST,RANGE,DATATYP     +
               &I=,                     -fullword address of string    +
               &LI=,                    -fullword length of string     +
               &PARMS=,                 -sub-parameters                +
               &TRUE=,                  -routine for true result       +
               &FALSE=                  -routine for false result
.*
         LCLC  &TRUER
         LCLC  &FALSER
&TRUER   SETC  '&TRUE'
&FALSER  SETC  '&FALSER'
         AIF ('&TRUER' NE '').TRUEOK
&TRUER   SETC  'T'.'&SYSNDX'
.TRUEOK  ANOP
         AIF ('&FALSER' NE '').FALSEOK
&FALSER  SETC  'F'.'&SYSNDX'
.FALSEOK ANOP
.*
         AIF ('&TYPE' EQ 'LENGTH').LENGTH
         AIF ('&TYPE' EQ 'LIST').LIST
         AIF ('&TYPE' EQ 'RANGE').RANGE
         AIF ('&TYPE' EQ 'DATATYP').DATATYP
         MNOTE 12,'Undefined TYPE selected: TYPE= &TYPE'
         MEXIT
.*
.**********************************************************************
.*
.LENGTH  ANOP
         MNOTE *,'Length Verify: Lower- &PARMS(1) , Upper- &PARMS(2)'
         L     R14,&LI                  -load length value
         C     R14,=F'&PARMS(1)'        -compare length to minimum
         BL    &FALSER                  -branch to false if lower
         C     R14,=F'&PARMS(2)'        -compare length to maximum
         BH    &FALSER                  -branch to false if lower
         B     &TRUER                   -branch to true routine
         AGO   .EXIT999
.*
.**********************************************************************
.*
.LIST    ANOP
         MNOTE *,'List Verify'
         LA    R14,0                    -init counter
&IDX1    SETA  N'&PARMS                 -number of compares required
&IDX2    SETA  1                        -init index for compares
.LISTLP  AIF (&IDX1 LE 0).LISTLPZ       -do we need another compare
&SI      SETC  'A'.'&SYSNDX'.'&IDX2'    -set pass branch address
         LA    R14,1(R14)               -add 1 to compare count
         L     R0,&LI                   -load length of string
         LA    R1,L'&PARMS(&IDX2)       -load length of compare string
         CR    R0,R1                    -compare lengths
         BNE   &SI                      -branch if not equal
         L     R1,&I                    -load address of string
         CLC   &PARMS(&IDX2),0(R1)      -compare string - string
         BNE   &SI                      -branch if not equal
         B     &TRUER                   -branch to true routine
&SI      EQU   *                        -address for skip
&IDX1    SETA  &IDX1-1                  -reduce number remaining
&IDX2    SETA  &IDX2+1                  -increase index
         AGO   .LISTLP                  -loop back
.LISTLPZ B     &FALSER                  -branch to false routine
         AGO   .EXIT999                 -exit macro
.*
.**********************************************************************
.*
.RANGE   ANOP
         MNOTE *,'Range Verify: Lower- &PARMS(1) , Upper- &PARMS(2)'
         LA    R0,X'70'                 -load length of work area
         L     R1,&LI                   -load length of input
         BCTR  R1,0                     -subtract 1 from length
         OR    R1,R0                    -or 2 lengths
         L     R15,&I                   -load address of string
         EX    R1,P&SYSNDX              -unpack string
         CVB   R14,W&SYSNDX             -convert value to binary
         C     R14,=F'&PARMS(1)'        -compare to minimum
         BL    &FALSER                  -branch to false routine
         C     R14,=F'&PARMS(2)'        -compare to maximum
         BH    &FALSER                  -branch to false routine
         B     &TRUER                   -branch to true routine
W&SYSNDX DS    D                        -
P&SYSNDX PACK  W&SYSNDX.(8),0(0,R15)    -
         AGO   .EXIT999                 -exit macro
.*
.**********************************************************************
.*
.DATATYP ANOP
         MNOTE *,'DataType Verify'
         LA    R1,=V(GJNTABLE)          -include table module
         L     R15,=V($VINIT)           -load address of work table
         L     R1,=V($VWORK)            -load address of work table
         MVC   0(256,R1),0(R15)         -initialize table
&IDX1    SETA  N'&PARMS                 -number of tables
.ANDLOP  AIF (&IDX1 LE 0).ANDLOPZ       -do we need another compare
         L     R15,=V($V&PARMS(&IDX1))  -load address of table
         NC    0(256,R1),0(R15)         -and table with work table
&IDX1    SETA  &IDX1-1
         AGO   .ANDLOP
.ANDLOPZ ANOP
         L     R14,&I                   -load address of string
         L     R15,&LI                  -load length of string
         LR    R0,R2                    -save R2
         EX    R15,V&SYSNDX             -test string
         LR    R2,R0                    -restore R2
         BM    &FALSER
         B     &TRUER                   -
V&SYSNDX TRT   0(0,R14),0(R1)           -translate
         AGO   .EXIT999                 -exit macro
.*
.EXIT999 AIF ('&FALSE' NE '').TESTTRU   -was false routine coded
F&SYSNDX EQU   *                        -no, so ..
         LA    R15,10                   -set RC to 10
         B     Z&SYSNDX                 -branch around true
.TESTTRU AIF ('&TRUE' NE '').ENDZZZZ    -was true routine coded
T&SYSNDX EQU   *                        -no, so .....
         LA    R15,0                    -set RC to 0
.*
.ENDZZZZ ANOP
Z&SYSNDX EQU   *
         MEND
