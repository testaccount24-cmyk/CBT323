         MACRO
.*
.**********************************************************************
.*                                                                    *
.* Component_Type: MVS HL-Assembler Macro                             *
.*    Description: Convert one data format to another                 *
.*         Author: Gerard J Nicol                                     *
.*           Date: September 1997                                     *
.*                                                                    *
.*--+----1----+----2----+----3----+----4----+----5----+----6----+----7* --+----8
.*
&LABEL   $CONVERT &TYPE,                -type of conversion            +
               &I=,                     -address of input              +
               &LI=,                    -length of input               +
               &O=,                     -address of output             +
               &LO=,                    -length of output              +
               &MODE=NOLEAD0,           -remove leading zeros          +
               &WORK=                   -address of work area
.*
&SX      SETC  '&SYSNDX'
         GBLC  &GNCVTMP
         AIF   ('&GNCVTMP' NE '').NOINITL
&GNCVTMP SETC  'A'.'&SYSNDX'
         AIF   ('&WORK' NE '').YESWORK
         B     T&SYSNDX
&GNCVTMP DC    D'0'                     -define storage for workarea
         AGO   .NOWORK
.YESWORK ANOP
&GNCVTMP SETC  '&WORK'
         MNOTE *,'Work value overridden by value &WORK'
.NOWORK  ANOP
         LA    R0,=V(GJNTABLE)          -include conversion table
T&SYSNDX EQU   *
.NOINITL ANOP
.*
.*---------------------------------------------------------------------
.*
.*---------------------------------------------------------------------
.*
B&SYSNDX $DEFL    V=&I,VL=&LI           -get length of input
M&SYSNDX $GETMASK B&SX                  -get load mask of input
         AIF   ('&O' EQ '').LOSET       -check for output
C&SYSNDX $DEFL    V=&O,VL=&LO           -get length of output
N&SYSNDX $GETMASK C&SX                  -get STCM for outut
.LOSET   ANOP
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
         AIF ('&TYPE' EQ 'S2Z').S2Z     -spaces to zeros
         AIF ('&TYPE' EQ 'Z2S').Z2S     -zeros to spaces
         AIF ('&TYPE' EQ 'C2X').C2X     -character to hex
         AIF ('&TYPE' EQ 'X2C').X2C     -hex to character
         AIF ('&TYPE' EQ 'B2C').B2C     -binary to character
         AIF ('&TYPE' EQ 'C2B').C2B     -character to binary
         AIF ('&TYPE' EQ 'C2D').C2D     -character to decimal
         AIF ('&TYPE' EQ 'D2C').D2C     -decimal to character
         AIF ('&TYPE' EQ 'C2T').C2T     -character to IP address
         AIF ('&TYPE' EQ 'S2N').S2N     -spaces to nulls
         AIF ('&TYPE' EQ 'T2T').T2T     -TOD to EBCDIC time
         MNOTE 12,'Undefined TYPE selected: TYPE= &TYPE'
         MEXIT
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.S2Z     ANOP
         L     R15,=V($S2Z)             -load address of table
         TR    &I.(B&SYSNDX),0(R15)     -translate spaces to zeros
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.Z2S     ANOP
         LR    R14,R2                   -save register 2
         L     R15,=V($Z2S)             -load address of table
         TRT   &I.(B&SYSNDX),0(R15)     -look for first non-zero
         BM    S&SYSNDX
         LA    R1,&I+B&SYSNDX-2
         LA    R0,&I                    -load address of string
         SR    R1,R0                    -establish length
         STC   R1,W&SYSNDX+1
         LA    R1,1(R1)
         B     W&SYSNDX
S&SYSNDX EQU   *
         LA    R0,&I                    -load address of string
         SR    R1,R0                    -establish length
         STC   R1,W&SYSNDX+1
W&SYSNDX TR    &I.(256),256(R15)
         LR    R2,R14                   -restore register 2
Z&SYSNDX EQU   *
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.C2X     ANOP
         LA    R14,&I                   -load address of input
         LA    R15,B&SYSNDX             -load length of input
         LA    R1,&O                    -load address of output
E&SYSNDX EQU   *
         XR    R0,R0                    -initialize before load
         IC    R0,0(R14)                -load up byte
         SRL   R0,4                     -shift 28 bits to right
         STC   R0,0(R1)                 -store byte
         LA    R1,1(R1)                 -kick output along by 1
         IC    R0,0(R14)                -load up byte
         SLL   R0,28                    -shift 28 bits to left
         SRL   R0,28                    -shift 28 bits to right
         STC   R0,0(R1)                 -store byte
         LA    R1,1(R1)                 -kick output along by 1
         LA    R14,1(R14)               -move to next input char
         BCT   R15,E&SYSNDX             -loop if we still have chars
         L     R15,=V($C2X)             -address of external table
         TR    &O.(B&SYSNDX*2),0(R15)   -translate to EBCDIC
         AIF   ('&MODE' NE 'NOLEAD0').EXIT999
         $CONVERT Z2S,I=&O
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.X2C     ANOP
         MVC   &GNCVTMP.(2),&I          -move to temp storage
         L     R15,=V($X2C)             -load address of converter
         TR    &GNCVTMP.(2),0(R15)      -translate to binary
         XR    R0,R0                    -initialize
         IC    R0,&GNCVTMP              -load first byte
         XR    R1,R1                    -initialize
         IC    R1,&GNCVTMP+1            -load second byte
         SLL   R1,28                    -shift 28 to left
         SLDL  R0,4                     -merge 2 bytes
         STC   R0,&O                    -store result in output
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.C2B     ANOP
         GBLC  &GNCVC2B
         AIF   ('&GNCVC2B' NE '').NOIC2B
&GNCVC2B SETC  'D'.'&SYSNDX'
         B     U&SYSNDX                 -branch around storage
&GNCVC2B DC    CL8'00000000'
.NOIC2B  ANOP
U&SYSNDX DS    0H
         MVC   &O.(C&SYSNDX),&GNCVC2B
         LA    R1,X'80'
         LA    R14,&O
         LA    R15,C&SYSNDX
         B     E&SYSNDX
I&SYSNDX TM    &I,0
E&SYSNDX EQU   *
         EX    R1,I&SYSNDX
         BZ    G&SYSNDX
         MVI   0(R14),C'1'
G&SYSNDX EQU   *
         SRL   R1,1
         LA    R14,1(R14)
         BCT   R15,E&SYSNDX
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.C2D     ANOP
         $LOAD &I,1,&LI
         CVD   R1,&GNCVTMP
         OI    &GNCVTMP+7,X'0F'
         UNPK  &O.(C&SYSNDX),&GNCVTMP
         AIF   ('&MODE' NE 'NOLEAD0').EXIT999
         $CONVERT Z2S,I=&O
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.D2C     ANOP
         PACK  &GNCVTMP.(8),&I.(B&SYSNDX)
         CVB   R0,&GNCVTMP
         STCM  R0,N&SYSNDX,&O
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.B2C     ANOP
         XR    R0,R0                    -init work register
         LA    R14,B&SYSNDX             -load length of input
         LA    R15,&I                   -load address of input
D&SYSNDX EQU   *
         CLI   0(R15),C'1'
         BNE   E&SYSNDX
         L     R1,=X'FFFFFFFF'
         B     F&SYSNDX
E&SYSNDX XR    R1,R1
F&SYSNDX EQU   *
         SLDL  R0,1
         LA    R15,1(R15)
V&SYSNDX BCT   R14,D&SYSNDX
W&SYSNDX EQU   *
         STCM  R0,N&SYSNDX,&O
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.C2T     ANOP
&A       SETC  '&SYSNDX'                -shorten SYSNDX
         MVC   AA&A.(4),&I              -set IP (fullword)
         B     U&SYSNDX                 -branch around storage
AA&A     DS    CL1                      -IP (1)
AB&A     DS    CL1                      -IP (2)
AC&A     DS    CL1                      -IP (3)
AD&A     DS    CL1                      -IP (4)
BA&A     DS    CL3                      -IP Full (1)
         DC    CL1'.'                   -
BB&A     DS    CL3                      -
         DC    CL1'.'                   -
BC&A     DS    CL3                      -
         DC    CL1'.'                   -
BD&A     DS    CL3                      -
U&SYSNDX DS    0H
         $CONVERT C2D,I=&I+0,LI=1,O=BA&A
         $CONVERT C2D,I=&I+1,LI=1,O=BB&A
         $CONVERT C2D,I=&I+2,LI=1,O=BC&A
         $CONVERT C2D,I=&I+3,LI=1,O=BD&A
         MVC   &O,BA&A
         $CONVERT S2N,I=&O,O=&O
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.S2N     ANOP
         LA   R15,B&SYSNDX-1
         LA   R14,&I
L&SYSNDX EQU  *
         CLI  0(R14),C' '
         BNE  O&SYSNDX
         MVC  0(1,R14),1(R14)
         MVI  1(R14),C' '
O&SYSNDX EQU  *
         LA   R14,1(R14)
         BCT  R15,L&SYSNDX
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.T2T     ANOP
&A       SETC  '&SYSNDX'                -shorten SYSNDX
         STCK  AA&A
         B     AE&A
AA&A     DS    D
AB&A     DS    2D
AC&A     DC    C'??:??:??'
AD&A     DS    CL8
AE&A     EQU   *
         STCKCONV STCKVAL=AA&A,         -convert from TOD              +
               CONVVAL=AB&A
         UNPK  AD&A,AB&A.(4)
         MVC   AC&A+0(2),AD&A+1
         MVC   AC&A+3(2),AD&A+3
         MVC   AC&A+6(2),AD&A+5
         MVC   &O,AC&A
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.EXIT999 ANOP
         MEND
