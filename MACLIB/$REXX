         MACRO
.*
.**********************************************************************
.*                                                                    *
.* Component_Type: MVS HL-Assembler Macro                             *
.*    Description: Generate REXX Function code                        *
.*         Author: Gerard J Nicol                                     *
.*           Date: September 1997                                     *
.*                                                                    *
.*--+----1----+----2----+----3----+----4----+----5----+----6----+----7* --+----8
.*
&LABEL   $REXX &MODE,                   -Entry,Say,Queue,Include ...   +
               &SUBMODE=,               -sub-mode for operation        +
               &EFPL=R10,               -register with EFPL            +
               &COUNT=YES,              -count number of parms (R15)   +
               &STREAM=WRITEERR,        -I/O stream for SAY option     +
               &V=,                     -variable address              +
               &VL=,                    -variable length               +
               &N=,                     -variable name                 +
               &NEXT=,                  -address of next instruction   +
               &RC=,                    -return code to be set         +
               &RCLOC=RC,               -name of RC storage            +
               &ARGS=(0,0),             -number of args                +
               &COUNTER=@EPILOG,        -routine on count error        +
               &A=,                     -argument number               +
               &VTYPE=,                 -verification type             +
               &PARMS=,                 -parms for argument verify     +
               &ARGREG=R11,             -save argt address here        +
               &ARGEEXT=@EPILOG,        -argerror exit                 +
               &NB=N,                   -ignore blank for verification +
               &IFRCGT=,                -only invoke if R15 >          +
               &IFRCLT=                 -only invoke if R15 <
.*
         GBLC  &ARGTOTL
.*
         AIF ('&IFRCGT' EQ '').NOGTEST
         CH    R15,=AL2(&IFRCGT)
         BNH   X&SYSNDX
.NOGTEST ANOP
         AIF ('&IFRCLT' EQ '').NOLTEST
         CH    R15,=AL2(&IFRCLT)
         BNL   X&SYSNDX
.NOLTEST ANOP
.*
.CHKMODE ANOP
         AIF ('&MODE' EQ 'ENTRY').ENTRY
         AIF ('&MODE' EQ 'SAY').SETLEN
         AIF ('&MODE' EQ 'QUEUE').SETLEN
         AIF ('&MODE' EQ 'PULL').PULL
         AIF ('&MODE' EQ 'INCLUDE').INCLUDE
         AIF ('&MODE' EQ 'RESULT').SETLEN
         AIF ('&MODE' EQ 'VSET').SETLEN
         AIF ('&MODE' EQ 'EMSG').EMSG
         AIF ('&MODE' EQ 'VER').VER
         AIF ('&MODE' EQ 'DIR').DIR
         MNOTE 12,'Invalid mode spacified: &MODE'
         MEXIT
.*
.SETLEN  ANOP
         AIF ('&V' NE '').VCODED
         MNOTE 12,'Error: No Variable coded'
         MEXIT
.VCODED  ANOP
         AIF ('&VL' NE '').VLCODED      -was value length coded
         AIF ('&V'(1,1) EQ '(').VLSET   -skip if in register notation
V&SYSNDX EQU   L'&V                     -no, so set to length of value
         AGO   .VLSET                   -skip
.VLCODED ANOP
         AIF ('&VL'(1,1) EQ '(').VLSET  -we have a register here
V&SYSNDX EQU   &VL                      -set value to that coded
.VLSET   ANOP
         AIF ('&MODE' EQ 'SAY').SAY
         AIF ('&MODE' EQ 'QUEUE').QUEUE
         AIF ('&MODE' EQ 'RESULT').RESULT
         AIF ('&MODE' EQ 'VSET').VSET
         MNOTE 12,'Invalid mode spacified: &MODE'
         MEXIT
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.ENTRY   ANOP
&ARGTOTL SETC  'D'.'&SYSNDX'
&LABEL   DS    0H
         XC    &RCLOC,&RCLOC
*        L     R15,=V(REXXFP10)
*        BALR  R14,R15
         USING EFPL,&EFPL               -addressability to REXX arg
         L     R1,EFPLARG               -load address of first arg
         AIF ('&COUNT' EQ 'NO').NOCOUNT
         LR    R0,R1                    -save register
         USING ARGTABLE_ENTRY,R1        -map argument table.
         LR    R0,R1                    -save address
         XR    R15,R15                  -reset parm counter
A&SYSNDX EQU   *
         CLC   ARGTABLE_ENTRY,=XL8'FFFFFFFFFFFFFFFF'
         BE    B&SYSNDX                 -this was the last parm
         LA    R15,1(R15)               -add 1 to parm counter
         LA    1,L'ARGTABLE_NEXT(1)     -move to next parm entry
         B     A&SYSNDX                 -keep looking
B&SYSNDX EQU   *
         LR    R1,R0                    -restore register
         LA    R14,&ARGS(1)             -load minimum arg count
         CR    R15,R14                  -compare to count
         BL    C&SYSNDX
         LA    R14,&ARGS(1)+&ARGS(2)    -load maximum args
         CR    R15,R14                  -compare to count
         BH    C&SYSNDX                 -branch to error routine
         B     F&SYSNDX                 -branch around error routine
C&SYSNDX EQU   *
         $REXX SAY,V=E&SYSNDX,          -display message               +
               RC=20,                   -set RC=20                     +
               NEXT=&COUNTER            -exit
         B     F&SYSNDX                 -branch around
&ARGTOTL DC    H'0'                     -argument counter
E&SYSNDX $REXX EMSG,V='Invalid arg count: Req=&ARGS(1), Opt=&ARGS(2)'
F&SYSNDX DS    0H
         STH   R15,&ARGTOTL             -save argument total
         LR    &ARGREG,R1               -save argtable address
.NOCOUNT AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.SAY     ANOP
&LABEL   DS    0H
         GBLA  &RXSYCNT
         GBLC  &RXSYWR
         GBLC  &RXSYWRE
         GBLC  &RXSYPRM
         GBLC  &RXSYVAL
&RXSYCNT SETA  &RXSYCNT+1
         MNOTE *,'Entering REXX SAY Macro. Macro Count= &RXSYCNT'
         AIF ('&RXSYCNT' GT '1').RXSY001
         MNOTE *,'Declaring storage due to first invokation'
         B     L&SYSNDX
&RXSYWR  SETC  'A'.'&SYSNDX'
&RXSYWRE SETC  'B'.'&SYSNDX'
&RXSYVAL SETC  'C'.'&SYSNDX'
&RXSYPRM SETC  'D'.'&SYSNDX'
&RXSYVAL DS    0F
         DS    A(0)
         DS    A(0)
&RXSYPRM DS    0F
         DC    A(0)
         DC    A(&RXSYVAL)
         DC    A(&RXSYVAL+4+X'80000000')
L&SYSNDX EQU   *
.RXSY001 ANOP
         LA    R0,=CL8'&STREAM'         -load address of stream type
         ST    R0,&RXSYPRM              -store in parmlist
         $LOAD &V,R0,MODE=ADDR          -load address of value
         $LOAD &V,R1,VL=&VL,MODE=LENGTH -load length of value
         STM   R0,R1,&RXSYVAL           -store in parm list
         LINK  EP=IRXSAY,MF=(E,&RXSYPRM)
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.QUEUE   ANOP
&LABEL   DS    0H
         B     Y&SYSNDX                 -branch around instream stor
A&SYSNDX DC    CL8'QUEUE'               -type of operation
B&SYSNDX DC    A(0)                     -address of queue data
C&SYSNDX DC    A(0)                     -length of queue data
D&SYSNDX DC    F'0'                     -
E&SYSNDX DC    A(A&SYSNDX)              -address of parms for call
F&SYSNDX DC    A(B&SYSNDX)              -
G&SYSNDX DC    A(C&SYSNDX)              -
H&SYSNDX DC    A(D&SYSNDX+X'80000000')  -
Y&SYSNDX DS    0H                       -
         AIF ('&VL' EQ '').Q#NOVL
         AIF ('&VL'(1,1) EQ '(').Q#REG  -use register notation
.Q#NOVL  ANOP
         AIF ('&SUBMODE' NE 'FSPACE').QFSPACE
         $FINDCHR I=&V
         LR    R1,R15
         AGO   .QGO
.QFSPACE ANOP
         LA    R1,V&SYSNDX              -load length
.QGO     ANOP
         LA    R0,&V                    -load address
         STM   R0,R1,B&SYSNDX           -store address and length
         LINK  EP=IRXSTK,               -call REXX routine             +
               MF=(E,E&SYSNDX)          -
         AGO   .EXIT999
.Q#REG   ANOP
&VLR     SETC  '&VL'(2,K'&VL-2)
         LR    R1,&VLR
         AGO   .QGO
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.PULL    ANOP
&LABEL   DS    0H
         B     Y&SYSNDX                 -branch around instream stor
A&SYSNDX DC    CL8'PULL'                -type of operation
B&SYSNDX DC    A(0)                     -address of queue data
C&SYSNDX DC    A(0)                     -length of queue data
D&SYSNDX DC    F'0'                     -
E&SYSNDX DC    A(A&SYSNDX)              -address of parms for call
F&SYSNDX DC    A(B&SYSNDX)              -
G&SYSNDX DC    A(C&SYSNDX)              -
H&SYSNDX DC    A(D&SYSNDX+X'80000000')  -
Y&SYSNDX DS    0H                       -
         LINK  EP=IRXSTK,               -call REXX routine             +
               MF=(E,E&SYSNDX)          -
         L     R0,C&SYSNDX              -load length
         L     R1,B&SYSNDX              -load address
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.INCLUDE ANOP
&LABEL   DS    0H
         IRXSHVB                        -map REXX Shared Variable Block
         IRXEFPL                        -map REXX External Funt Parm
         IRXARGTB                       -map REXX Argument Table
         IRXEVALB                       -map REXX Evaluation Block
         IRXENVB
         IRXPARMB
         IRXSUBCT
         IRXPACKT
         IRXFPDIR
         IRXEXECB
         IRXWORKB
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.DIR     ANOP
         DC    CL8'&V'                  -function name
         DC    V(&V)                    -function address
         DC    A(0)                     -reserved
         DC    CL8' '                   -function EP
         DC    CL8' '                   -function load DD
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.RESULT  ANOP
&LABEL   DS    0H
         AIF ('&SUBMODE' EQ 'TOTAL').R#TOTAL
         USING EFPL,&EFPL               -map EFPL
         AIF ('&SUBMODE' EQ 'LARGE').R#LARGE
         L     R14,EFPLEVAL             -load address of EVAL address
         L     R14,0(R14)               -load address of EVAL Block
         USING EVALBLOCK,R14            -map EVAL block
         AIF ('&VL' EQ '').R#SKIP1
         AIF ('&VL'(1,1) EQ '(').R#REG  -use register notation
.R#SKIP1 ANOP
         AIF ('&SUBMODE' EQ 'FSPACE').RFSPACE
         LA    R15,V&SYSNDX
         AGO  .RSET
.RFSPACE $FINDCHR I=&V
.RSET    ST    R15,EVALBLOCK_EVLEN
         EX    R15,M&SYSNDX
         AGO   .R#END
.R#REG   ANOP
&VLR     SETC  '&VL'(2,K'&VL-2)
         ST    &VLR,EVALBLOCK_EVLEN
         EX    &VLR,M&SYSNDX
.R#END   ANOP
         B     Z&SYSNDX
M&SYSNDX MVC   EVALBLOCK_EVDATA(0),&V
Z&SYSNDX EQU   *
         AGO   .EXIT999
.R#TOTAL ANOP
&VR      SETC  '&V'(2,K'&V-2)           -cleanup register
         ST    &V,N&SYSNDX              -store total
         B     M&SYSNDX                 -branch around inline storage
N&SYSNDX DS    F                        -store area
O&SYSNDX DS    CL8                      -workarea
M&SYSNDX EQU   *
         $CONVERT C2D,                  -convert total to decimal      +
               I=N&SYSNDX,              -                              +
               O=O&SYSNDX               -
         LA    R15,O&SYSNDX             -load address of output
         AR    R15,R1                   -move past spaces
         LA    R0,8                     -load length
         SR    R0,R1                    -reset length
         LR    R1,R0
         $REXX RESULT,V=0(15),VL=(1)    -set result
         AGO   .EXIT999                 -branch to exit
.R#LARGE ANOP
         B     I&SYSNDX
E&SYSNDX DC    CL8'GETBLOCK'            -operation
F&SYSNDX DC    A(0)                     -result address
G&SYSNDX DC    A(0)                     -length of new area
H&SYSNDX DC    A(E&SYSNDX)
         DC    A(F&SYSNDX)
         DC    A(G&SYSNDX+X'80000000')
I&SYSNDX DS    0H
&VLR     SETC  '&VL'(2,K'&VL-2)
         ST    &VLR,G&SYSNDX            -store length
         LINK  EP=IRXRLT,               -get larger result block       +
               MF=(E,H&SYSNDX)
         L     R14,F&SYSNDX             -load address of EvAL Block
         USING EVALBLOCK,R14            -map EVAL block
         ST    &VLR,EVALBLOCK_EVLEN     -store length
         LA    R0,EVALBLOCK_EVDATA      -load address of result
         LR    R1,&VLR                  -load length of result
         LA    R14,&V                   -load address of workarea
         LR    R15,R1                   -load same length
         MVCL  R0,R14                   -set result
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.VSET    ANOP
&LABEL   DS    0H
         GBLA  &RXVSCNT
         GBLC  &RXVSPRM
&RXVSCNT SETA  &RXVSCNT+1
         MNOTE *,'Entering REXX Variable Set Macro, Count= &RXVSCNT'
         AIF ('&RXVSCNT' GT '1').RXVS001
         MNOTE *,'Declaring storage due to first invokation'
         B     L&SYSNDX
A&SYSNDX DC     CL8'IRXEXCOM'
&RXVSPRM SETC  'B'.'&SYSNDX'
&RXVSPRM DS     0F
         DC     A(A&SYSNDX)
         DC     A(0)
         DC     A(0)
         DC     A(0)
L&SYSNDX DS     0H
.RXVS001 ANOP
         AIF   ('&N' NE '').NCODED
&NAME    SETC  '&V'
         MNOTE *,'Variable name set to &NAME, as no value coded'
         AGO   .NSET
.NCODED  ANOP
&NAME    SETC  '&N'
.NSET    ANOP
         B     Y&SYSNDX
N&SYSNDX DC    C'&NAME'
Y&SYSNDX DS    0H
         LA    R0,SHVBLEN               -load length of block
         GETMAIN RU,SP=0,LV=(0)         -get storage
         ST    R1,&RXVSPRM+12           -store address of area
         OI    &RXVSPRM+12,B'10000000'  -set for last parm
         USING SHVBLOCK,R1              -map work area
         MVI   SHVCODE,SHVSTORE         -set for store
         LA    R14,N&SYSNDX             -load address of varname
         LA    R15,L'N&SYSNDX           -load length of varname
         STM   R14,R15,SHVNAMA          -store address & length
         LA    R14,&V                   -load address of value
         LA    R15,V&SYSNDX             -load length of value
         STM   R14,R15,SHVVALA          -store address & length
         LINK  EP=IRXEXCOM,             -link to REXX server           +
               MF=(E,&RXVSPRM)
         L     R1,&RXVSPRM+12           -load address for freemain
         LA    R0,SHVBLEN               -load length to be freed
         FREEMAIN RU,SP=0,LV=(0),A=(1)  -free storage
         AGO   .EXIT999
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.EMSG    ANOP
&LABEL   DC    CL(H&SYSNDX)' '
         ORG   &LABEL
G&SYSNDX EQU   *
         DC    C'REXXFP (&SYSECT): '
         DC    C&V
H&SYSNDX EQU   *-G&SYSNDX
         AGO   .NONEXT
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.VER     ANOP
&TA      SETA  &A-1                     -set true arg value
&OA      SETA  &TA*8                    -set offset value
&OB      SETA  &TA*8+4
         XR    R1,R1                    -init regirster 1
         XR    R14,R14                  -init regirster 14
         XR    R15,R15                  -init regirster 15
         CLC   =H'&A',&ARGTOTL
         BH    G&SYSNDX
         AIF ('&NB' EQ 'Y').VERNB
         CLC   &OB.(4,R11),=F'0'        -check for null parm
         BE    G&SYSNDX                 -skip verification
.VERNB   ANOP
         AIF ('&VTYPE' NE 'RANGE').VERGO
         $REXX VER,                     -check length                  +
               A=&A,                                                   +
               VTYPE=LENGTH,                                           +
               PARMS=(1,10),                                           +
               ARGEEXT=&ARGEEXT
         $REXX VER,                     -check type                    +
               A=&A,                                                   +
               VTYPE=DATATYP,                                          +
               PARMS=(NUM),                                            +
               ARGEEXT=&ARGEEXT
.VERGO   ANOP
         $VERIFY &VTYPE,                                               +
               I=&OA.(&ARGREG),                                        +
               LI=&OB.(&ARGREG),                                       +
               PARMS=&PARMS,                                           +
               TRUE=G&SYSNDX
         $REXX SAY,V=F&SYSNDX,          -display message               +
               RC=20,                   -set RC=20                     +
               NEXT=&ARGEEXT            -exit
         B     G&SYSNDX                 -branch around message
         AIF ('&VTYPE' NE 'LENGTH').VERNLE
&VALS    SETC  '&PARMS(1)'.'-'.'&PARMS(2)'
F&SYSNDX $REXX EMSG,V='Arg-&A length error: Valid lengths(&VALS)'
         AGO   .VEREND
.VERNLE  ANOP
         AIF ('&VTYPE' NE 'RANGE').VERNRA
&VALS    SETC  '&PARMS(1)'.'-'.'&PARMS(2)'
F&SYSNDX $REXX EMSG,V='Arg-&A range error: Valid ranges(&VALS)'
         AGO   .VEREND
.VERNRA  ANOP
         AIF ('&VTYPE' NE 'DATATYP').VERNDT
F&SYSNDX $REXX EMSG,V='Arg-&A is of an invalid data type'
         AGO   .VEREND
.VERNDT  ANOP
         AIF ('&VTYPE' NE 'LIST').VERNLS
F&SYSNDX $REXX EMSG,V='Arg-&A contains an invalid data'
         AGO   .VEREND
.VERNLS  ANOP
.VEREND  ANOP
G&SYSNDX DS    0H
         AGO   .NONEXT
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.EXIT999 ANOP
         AIF ('&RC' EQ '').NORCSET      -do we want RC set
         AIF (L'&RCLOC EQ 1).RC1
         AIF (L'&RCLOC EQ 2).RC2
         AIF (L'&RCLOC EQ 4).RC4
         MNOTE 12,'Invalid RC length'
         MEXIT
.RC1     ANOP
         LA    R0,&RC
         STC   R0,&RCLOC
         AGO   .NORCSET
.RC2     ANOP
         LA    R0,&RC
         STH   R0,&RCLOC
         AGO   .NORCSET
.RC4     ANOP
         LA    R0,&RC
         ST    R0,&RCLOC
         AGO   .NORCSET
.NORCSET ANOP
         AIF ('&NEXT' EQ '').NONEXT
         B     &NEXT
X&SYSNDX DS    0H
.NONEXT  ANOP
*
         MEND
