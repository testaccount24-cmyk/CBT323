         MACRO
.*
.**********************************************************************
.*                                                                    *
.* Component_Type: MVS HL-Assembler Macro                             *
.*    Description: Standard Entry/Exit Macro                          *
.*         Author: Gerard J Nicol                                     *
.*           Date: September 1997                                     *
.*                                                                    *
.*--+----1----+----2----+----3----+----4----+----5----+----6----+----7* --+----8
.*
&LABEL   $GJNLINK &TYPE,                -PROLOG/EPILOG                 +
               &EQU=YES,                -do we want reg equates        +
               &PARMPTR=R1,             -place R1 here                 +
               &LASTCC=,                -set RC from this              +
               &BASE=(12),              -use this as a base            +
               &REGSAVE=NO,             -provide a register save area  +
               &LOC=RES,                -location of register save     +
               &AUTHOR='Gerard J Nicol',                               +
               &COMPANY='(c) Eureka Systems Programming Pty Ltd.',     +
               &COUNTRY='Sydney, Australia'
.*
         GBLA  &GJNST99
         GBLA  &GJNEQ99
.*
         AIF ('&REGSAVE' EQ 'YES').TEST1OK
         AIF ('&REGSAVE' EQ 'NO').TEST1OK
         MNOTE 12,'REGSAVE invalid: YES/NO'
         MEXIT
.TEST1OK ANOP
.*
.*------------------------------------------------------------*
.* Equate registers, if requested                             *
.*------------------------------------------------------------*
.*
         AIF ('&EQU' EQ 'NO').NOEQU
         AIF ('&EQU' EQ 'YES').YESEQU
         MNOTE 12,'EQU invalid: YES/NO'
         MEXIT
.YESEQU  ANOP
         AIF (&GJNEQ99 EQ 1).NOEQU
&GJNEQ99 SETA  1
         YREGS
.NOEQU   ANOP
.*
.*------------------------------------------------------------*
.* Evaluate TYPE                                              *
.*------------------------------------------------------------*
.*
         AIF ('&TYPE' EQ 'PROLOG').PROLOG
         AIF ('&TYPE' EQ 'EPILOG').EPILOG
         MNOTE 12,'TYPE invalid: EPILOG/PROLOG'
         MEXIT
.*
.*------------------------------------------------------------*
.*                                                            *
.*------------------------------------------------------------*
.*
.PROLOG  ANOP
&LABEL   DS    0H
         BAKR  14,0                  -save callers regs
         AIF ('&PARMPTR' EQ 'R1').SKIPR1
         AIF ('&PARMPTR' EQ '1').SKIPR1
         LR    &PARMPTR,R1           -save argument register
.SKIPR1  ANOP
&REGTOTL SETA  N'&BASE
         LR    &BASE(1),15           -load base register
         USING &LABEL,&BASE(1)       -give module addressability
&THISREG SETA  2
&OFFSET  SETA  0
.REGLOOP ANOP
         AIF ('&REGTOTL' LE '1').NOBREG
&LASTREG SETA  &THISREG-1
&OFFSET  SETA  &OFFSET+4095
         LA    &BASE(&THISREG),4095(&BASE(&LASTREG))
         USING &LABEL+&OFFSET,&BASE(&THISREG)
&REGTOTL SETA  &REGTOTL-1
&THISREG SETA  &THISREG+1
         AGO   .REGLOOP
.NOBREG  ANOP
.*
.*
         AIF ('&REGSAVE' EQ 'NO').NORSAVE
.*
         STORAGE OBTAIN,             -get storage for savearea         +
               LENGTH=72,            -length of savearea               +
               LOC=&LOC              -location of savearea
         LR    R13,R1                -save location of savearea
         MVC   4(4,R13),=C'F1SA'     -indicate use of linkage stack
&GJNST99 SETA  1
.NORSAVE ANOP
         B     A&SYSNDX              -branch around header
         DC    AL1(A&SYSNDX-*)       -length of header
         DC    CL8'&SYSECT'          -define name of module
         DC    CL1'-'                -pad char
         DC    CL8'&SYSDATC'         -define assembly date
         DC    CL1'-'                -pad char
         DC    CL5'&SYSTIME'         -define assemble time
         DC    CL1' '                -pad char
         DC    C&COMPANY             -define assemble time
         DC    CL1' '                -pad char
         DC    C&COUNTRY             -define assemble time
         DC    CL1' '                -pad char
         DC    C&AUTHOR              -define author name
A&SYSNDX DS    0H
         AIF ('&PARMPTR' EQ 'R1').NOSETP
.NOSETP  ANOP
         AGO   .ENDMCRO
.*
.EPILOG  ANOP
&LABEL   DS    0H
         AIF ('&GJNST99' NE '1').NOFREE
         LR    1,13
         STORAGE RELEASE,                                              +
               ADDR=(1),                                               +
               LENGTH=72
.NOFREE  ANOP
         AIF ('&LASTCC' EQ '').NORC
         AIF (L'&LASTCC EQ 1).RC1
         AIF (L'&LASTCC EQ 2).RC2
         AIF (L'&LASTCC EQ 4).RC4
         MNOTE 12,'Invalid RC length'
         MEXIT
.RC1     ANOP
         XR    R15,R15
         IC    R15,&LASTCC
         AGO   .NORC
.RC2     ANOP
         LH    R15,&LASTCC
         AGO   .NORC
.RC4     ANOP
         L     R15,&LASTCC
         AGO   .NORC
.NORC    ANOP
         PR                          -return to caller
         AGO   .ENDMCRO
.*
.ENDMCRO ANOP
         MEND
