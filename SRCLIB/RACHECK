RACHECK  TITLE 'REXX function- Check SAF access'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Check SAF access                                   *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
RACHECK  CSECT
RACHECK  AMODE ANY
RACHECK  RMODE ANY
         PRINT GEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(1,2)         -std REXX entry
*
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(1,44),                                           +
               NB=Y
         LM    R0,R1,0(R11)            -load address/length of arg-1
         LA    R14,ENTITY              -load address
         LA    R15,L'ENTITY            -load length
         ICM   R1,B'1000',SPACE        -set pad char
         MVCL  R14,R0                  -move
*
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(A1,A2,A3,A4),                                    +
               NB=N
         LA    R1,A0V(R14)
         XR    R5,R5
         IC    R5,0(R1)
*
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(1,8),                                            +
               NB=N
         LTR   R14,R14                  -do we have an arg-3
         BNZ   @ARG3OK                  -yes, so set arg-3
         MVC   CLASS(8),DATASET         -no so set default value
         B     @ARG3DEF                 -branch around
@ARG3OK  EQU   *
         LA    R0,CLASS                 -load address of class
         LA    R1,8                     -load length of class
         LM    R14,R15,16(R11)          -load address/length of arg-3
         ICM   R15,B'1000',SPACE        -set pad char
         MVCL  R0,R14                   -move class value
@ARG3DEF EQU   *
@RACROUT EQU   *
         RACROUTE REQUEST=AUTH,                                        +
               WORKA=WORKA,                                            +
               CLASS=CLASS,                                            +
               RACFIND=YES,                                            +
               ATTR=(5),                                               +
               ENTITY=(ENTITY,NONE)
*
         MVI   RESULT,C'1'
         LTR   R15,R15
         BZ    @RESULT
         MVI   RESULT,C'0'
@RESULT  EQU   *
         $REXX RESULT,V=RESULT
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
RC       DC    H'0'
RESULT   DC    CL1' '
DATASET  DC    CL8'DATASET'
ENTITY   DC    CL44' '
WORKA    DC    2CL256' '
CLASS    DC    CL8' '
SPACE    DC    CL1' '
*
A1       DC    C'READ'
A2       DC    C'UPDATE'
A3       DC    C'CONTROL'
A4       DC    C'ALTER'
A0V      DC    X'02'
A1V      DC    X'02'
A2V      DC    X'04'
A3V      DC    X'08'
A4V      DC    X'80'
*
         $REXX INCLUDE
         END   RACHECK
