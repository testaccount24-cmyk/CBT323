MLWTO    TITLE 'REXX function- issue a multi-line WTO'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Multi-Line WTO                                     *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
MLWTO    CSECT
MLWTO    AMODE 31
MLWTO    RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         XC    RC,RC                    -init RC
         $REXX ENTRY,ARGS=(1,254)
         LR    R9,R15                   -save number of args
         XC    DYNARRAY(4),DYNARRAY     -init dynamic storage array
         STC   R9,EWTOLIST              -save in WTO args
         LA    R8,WTOX                  -load address of WTO extent
         BAL   R14,@MALLOC              -getmain storage, return addr
         ST    R1,WTOLIST+4             -store first argument
         BCT   R9,@MULTI                -process subsequent
         B     @GO                      -skip if no subsequent
@MULTI   EQU   *
         LA    R11,8(R11)               -move to next argument
         BAL   R14,@MALLOC              -getmain storage, return addr
         MVC   0(2,R8),=AL2(8)          -set length value
         MVC   2(2,R8),=XL2'2000'       -set flags
         ST    R1,4(R8)                 -set address
         LA    R8,8(R8)                 -move to next entry
         BCT   R9,@MULTI                -process subsequent
@GO      EQU   *
         XR    R0,R0                    -initialize
         WTO   MF=(E,WTOLIST)
         ST    R1,RESULT                -store WTO ID
         LTR   R15,R15                  -test RC from WTO
         BZ    @EPILOG                  -RC=0
         $REXX SAY,V=EMSG0002,          -display message               +
               RC=20,                   -set RC=20                     +
               NEXT=@EPILOG
@EPILOG  EQU   *
         L     R2,DYNARRAY              -load number of records
@FREEIT  EQU   *
         LR    R3,R2                    -load number
         SLL   R3,2                     -multiply by 4
         LA    R3,DYNARRAY(R3)          -load offset
         L     R3,0(R3)                 -load address
         STORAGE RELEASE,               -release storage               +
               LENGTH=MAX+2,                                           +
               ADDR=(3)
         BCT   R2,@FREEIT               -branch back
@EFREE   EQU   *
         $REXX RESULT,V=RESULT
         $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
@MALLOC  EQU   *
         ST    R14,RETURN               -save address of caller
         LM    R2,R3,0(R11)             -load address/length
         C     R3,MAXLEN                -if GT 71
         BH    @BADLEN                  -yes, so display message
         LTR   R3,R3                    -is EQ 0
         BZ    @BADLEN                  -yes, so display message
         STORAGE OBTAIN,                -obtain the storage            +
               LENGTH=MAX+2
         L     R14,DYNARRAY             -load number of records
         LA    R14,1(R14)               -add 1
         ST    R14,DYNARRAY             -save new total
         BCTR  R14,0                    -subtract 1
         SLL   R14,2                    -multiply by 4
         LA    R14,DYNARRAY+4(R14)
         ST    R1,0(R14)                -store address
         L     R14,DYNARRAY             -load number of records
         STCM  R3,B'0011',0(R1)         -store length of this string
         EX    R3,$MOVE                 -move the message
         L     R14,RETURN               -load address of caller
         BR    R14                      -return to caller
$MOVE    MVC   2(0,R1),0(R2)            -move for execute
*
@BADLEN  EQU   *
         $REXX SAY,V=EMSG0001,          -display message               +
               RC=20,                   -set RC=20                     +
               NEXT=@EPILOG
*
RESULT   DC    A(0)
RC       DC    H'0'
M1       DS    0C
RETURN   DC    A(0)
MAX      EQU   71
MAXLEN   DC    A(MAX)
EMSG0001 $REXX EMSG,V='Message(s) length <0 or >71'
EMSG0002 $REXX EMSG,V='WTO ended with errors'
         LTORG
DYNARRAY DC    A(0)
         DC    256A(0)
*
WTOLIST  WTO   TEXT=((M1,D)),MF=L
EWTOLIST EQU   *-1
WTOX     DC    255CL8' '
*
         $REXX INCLUDE
         END   MLWTO
