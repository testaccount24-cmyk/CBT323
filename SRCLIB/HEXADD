HEXADD   TITLE 'REXX function- add in hex'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Add in HEX                                         *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
HEXADD   CSECT
HEXADD   AMODE 31
HEXADD   RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(0,5)         -std REXX entry
         LR    R9,R15                   -save number of args
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,4),                                            +
               NB=Y
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,4),                                            +
               NB=N
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=RANGE,                                            +
               PARMS=(0,9999999),                                      +
               NB=N
         LR    R5,R14                   -keep value for arg3
         $REXX VER,                                                    +
               A=4,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(A41,A42,A43),                                    +
               NB=N
         LR    R8,R14                   -keep value for arg4
         XR    R6,R6                    -zero
         XR    R7,R7                    -zero
         LTR   R9,R9                    -test for number of args
         BZ    @GO
         LM    R1,R2,0(R11)             -load address/lengths
         LTR   R1,R1                    -was arg1 null
         BZ    @NOARG1                  -yes, so skip
@LARG1   EQU   *
         SLL   R6,8                     -move to left
         IC    R6,0(R1)                 -load char
         LA    R1,1(R1)                 -move to next char
         BCT   R2,@LARG1                -loop thru
@NOARG1  EQU   *
         C     R9,=F'2'                 -test for number of args
         BL    @GO
         LM    R1,R2,8(R11)             -load address/lengths
         LTR   R1,R1                    -was arg2 null
         BZ    @NOARG2                  -yes, so skip
@LARG2   EQU   *
         SLL   R7,8                     -move to left
         IC    R7,0(R1)                 -load char
         LA    R3,1(R1)                 -move to next char
         BCT   R2,@LARG2                -loop thru
@NOARG2  EQU   *
@GO      EQU   *
         AR    R5,R6                    -add arg1 to arg3
         AR    R5,R7                    -add arg1 to arg3
         ST    R5,RESULT3               -save result
         LA    R15,@ARG4A               -load address of list
         SLL   R8,2                     -multiply opt by 4
         AR    R15,R8                   -add offset
         L     R14,0(R15)               -load address of processor
         BR    R14                      -branch to processor
@ARG4A   DC    A(@ARG4A0)
         DC    A(@ARG4A1)
         DC    A(@ARG4A2)
         DC    A(@ARG4A3)
         DC    A(@ARG4A4)
@ARG4A0  EQU   *
@ARG4A1  EQU   *
         $CONVERT C2X,                                                 +
               I=RESULT3,                                              +
               O=RESULT1,                                              +
               MODE=
         $REXX RESULT,V=RESULT1
         B     @EPILOG
@ARG4A2  EQU   *
         $REXX RESULT,V=(R5),SUBMODE=TOTAL
         B     @EPILOG
@ARG4A3  EQU   *
         L     R1,0(R5)
         ST    R1,RESULT3
@ARG4A4  EQU   *
         $REXX RESULT,V=RESULT3
@EPILOG  $GJNLINK EPILOG,LASTCC=RC
*
RC       DC    H'0'
A41      DC    CL1'X'
A42      DC    CL1'D'
A43      DC    CL1'S'
A44      DC    CL1'C'
RESULT1  DC    CL8'00000000'
RESULT2  DC    CL10'0000000000'
RESULT3  DC    F'0'
         $REXX INCLUDE
         END   HEXADD
