TASKS    TITLE 'REXX Function to display active tasks'
*
*---------------------------------------------------------------------*
*                                                                     *
*      Module: TASKS                                                  *
*      Author: Gerard Nicol                                           *
* Description: Queue MVS address space information                    *
*     Calling: TASKS(Type,Name,Owner)                                 *
*                                                                     *
*---+----1----+----2----+----3----+----4----+----5----+----6----+----7*
*
TASKS    CSECT
TASKS    AMODE 31
TASKS    RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=R10    -std entry
         $REXX ENTRY,ARGS=(0,4)         -count parms
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,8)
         LTR   R14,R14
         BZ    @NONAME
         MVC   FLTRPAR1(4),0(R11)
         ST    R14,LENGTHS1
@NONAME  EQU   *
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,3)
         LTR   R14,R14
         BZ    @NOTYPE
         MVC   FLTRPAR2(4),8(R11)
         ST    R14,LENGTHS2
@NOTYPE  EQU   *
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,8)
         LTR   R14,R14
         BZ    @NOUSER
         MVC   FLTRPAR3(4),16(R11)
         ST    R14,LENGTHS3
@NOUSER  EQU   *
         $REXX VER,                                                    +
               A=4,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(6,6),                                            +
               NB=N
         $REXX VER,                                                    +
               A=4,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(NOSTAK),                                         +
               NB=N
         STC   R14,STAKFLAG
*
         XR    R2,R2                    -load address of PSA
         USING PSA,R2                   -address PSA
         L     R2,FLCCVT                -load address of CVT
         USING CVT,R2                   -address CVT
         L     R2,CVTASVT               -load address of ASVT
         USING ASVT,R2                  -address ASVT
         LA    R8,ASVTENTY              -load address of first ASCB
         L     R9,ASVTMAXU              -load maximum addressspaces
         DROP  R2
         XR    R7,R7                    -init counter
@GETLOOP EQU   *
         TM    0(R8),ASVTAVAL           -see if ASID is free
         BO    @NEXTENT                 -if it is get next ASID
         IAZXJSAB READ,                                                +
               ASCB=0(R8),                                             +
               JOBID=TASKJBID,                                         +
               JOBNAME=TASKNAME,                                       +
               USERID=TASKUSER,                                        +
               ENTRYST=JOBSTA,                                         +
               EXECST=JOBEXEC
         LTR   R15,R15                  -see if macro found JSAB
         BNZ   @NEXTENT                 -no, so skip
*
         $FINDCHR I=TASKNAME
         ST    R15,LENGTHS1+4
         CALL  GJNFLTER,MF=(E,FLTRPAR1)
         CH    R15,=H'1'
         BH    @NEXTENT
         CALL  GJNFLTER,MF=(E,FLTRPAR2)
         CH    R15,=H'1'
         BH    @NEXTENT
         $FINDCHR I=TASKUSER
         ST    R15,LENGTHS3+4
         CALL  GJNFLTER,MF=(E,FLTRPAR3)
         CH    R15,=H'1'
         BH    @NEXTENT
*
         LA    R7,1(R7)                 -add 1 to counter
         CLI   STAKFLAG,X'01'
         BE    @NEXTENT
         $REXX QUEUE,V=TASKINFO
@NEXTENT EQU   *
         LA    R8,4(R8)                 -move pointer to next ASID
         BCT   R9,@GETLOOP              -subtract 1 from count, & loop
@RESULT  EQU   *
         $REXX RESULT,V=(7),SUBMODE=TOTAL
@EPILOG  $GJNLINK EPILOG,LASTCC=RC
*
RC       DC    F'0'
TEMP     DC    F'0'
RESULT   DC    CL5' '
NOSTAK   DC    C'NOSTAK'
STAKFLAG DC    XL1'00'
*
FLTRPAR1 CALL  ,(,LENGTHS1,TASKNAME,LENGTHS1+4),MF=L
LENGTHS1 DC    2F'0'
FLTRPAR2 CALL  ,(,LENGTHS2,TASKJBID,LENGTHS2+4),MF=L
LENGTHS2 DC    F'0',F'3'
FLTRPAR3 CALL  ,(,LENGTHS3,TASKUSER,LENGTHS3+4),MF=L
LENGTHS3 DC    2F'0'
*
TASKINFO DC    CL(TASKLENT)' '
         ORG   TASKINFO
TASKSTAR EQU   *
TASKNAME DC    CL8' '
         DC    CL1' '
TASKUSER DC    CL8' '
         DC    CL1' '
TASKJBID DC    CL8' '
         DC    C' '
JOBSTA   DC    CL8' '
         DC    C' '
JOBEXEC  DC    CL8' '
TASKLENT EQU   *-TASKSTAR
*
         IHAPSA                      -map Prefixed Save Area
         CVT     DSECT=YES           -map Communications Vector Table
         IHAASVT                     -map Address Space Vector Table
         IHAASCB DSECT=YES           -map Address Space Control Block
         IHAASSB                     -map Address space sec Block
         IAZJSAB                     -map Job Scheduler Control Block
         $REXX   INCLUDE
         END   TASKS
