GJNMODSC TITLE 'Get Load Module Info'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler                                   *
*    Description: Get Load Module Info                               *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
GJNMODSC CSECT
GJNMODSC AMODE 31
GJNMODSC RMODE 24
         PRINT GEN
@PROLOG  $GJNLINK PROLOG,                                              +
               PARMPTR=10,              -load arg address to R10       +
               BASE=(12)                -use R11/R12 as base address
*
         L     R11,SCOUNT               -load address of extra area
         USING COUNT,R11                -give addressability
*
         XC    RC,RC                    -init RC
         XR    R4,R4                    -reset module counter
*
         L     R8,0(R10)                -load address of arg1
         USING IHADCB,R8                -map DCB
         LA    R1,@EOD                  -load address of EOF routine
         ST    R1,DCBEODAD              -store in passed DCB
         L     R2,4(R10)                -load address of member
         FIND  (8),0(R2),D              -find/position member
         LTR   R15,R15                  -test RC from find
         BNZ   @EOD                     -if not OK then exit
         LA    R5,RECORDS               -load address of output
@READIT  EQU   *
         READ  DECB1,SF,(8),BUFFER,'S'  -read block
         CHECK DECB1                    -wait for read to complete
         CLI   BUFFER,X'20'             -was record CESD
         BNE   @EOD                     -no so stop read
         LH    R6,DCBLRECL              -load length of record
         SRL   R6,4                     -divide length by 16
         LA    R2,BUFFER                -load address of I-O area
@MODLOOP EQU   *
         LA    R4,1(R4)                 -add 1 to counter
         C     R4,MAXRECS               -see if we have hit wall..
         BH    @ABEND                   -if so abend
         MVC   0(16,R5),8(R2)           -move string
         LA    R5,16(R5)                -move to next output
         LA    R2,16(R2)                -move to next record
         BCT   R6,@MODLOOP              -move to next module
         B     @READIT                  -loop if more records
@EOD     EQU   *
         ST    R4,COUNT                 -store number of entries
         LA    R14,8(R10)               -load address of 2nd arg
         LA    R1,COUNT                 -load address of table
         ST    R1,0(R14)                -store address
         LTR   R4,R4                    -test total returned
         BNZ   @EPILOG                  -branch to exit
         MVI   RC,X'20'                 -set bad RC
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit
@ABEND   EQU   *
         WTO   'GJNMODSC- Maximum CESD objects reached (2000)'
         ABEND 10
*
RC       DC    XL1'00'
         LTORG
MAXRECS  DC    A(2000)
SCOUNT   DC    A(BUFFER+4096*8)
BUFFER   DS    4096CL8
*
COUNT    DC    F'0'
RECORDS  DC    2000CL16'EurekaSysPrg'
*
         DCBD  DSORG=PO
         END  GJNMODSC
