ENQLIST  TITLE 'REXX function- return GRS enq information'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Return GRS enq information                         *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
ENQLIST  CSECT
ENQLIST  AMODE 31
ENQLIST  RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(2,2)         -std REXX entry
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,8),                                            +
               NB=Y
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,255),                                          +
               NB=Y
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(4,4),                                            +
               NB=N
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(ONLY),                                           +
               NB=N
         STC   R14,ONLYFLAG
         $REXX VER,                                                    +
               A=4,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(6,6),                                            +
               NB=N
         $REXX VER,                                                    +
               A=4,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(NOSTAK),                                         +
               NB=N
         STC   R14,STAKFLAG
         STORAGE OBTAIN,LENGTH=WORKLENT -get storage for workarea
         LR    R9,R1                    -save address
         XC    TOKENVAL,TOKENVAL        -init token
         ST    R11,REGSAVE              -save address of arglist
         XR    R11,R11                  -zero counter
@SCAN    EQU   *
         L     R1,REGSAVE
         LM    R2,R5,0(R1)              -load arguments
         XR    R6,R6                    -zero regirster
         IC    R6,ONLYFLAG              -load flag
         LTR   R2,R2                    -test for null arg
         BNZ   @GQSCAN
         LA    R2,SYSDSN
         LA    R3,L'SYSDSN
@GQSCAN  EQU   *
         GQSCAN AREA=((9),WORKLENT),    -call GQSCAN routine           +
               SCOPE=ALL,                                              +
               TOKEN=TOKENVAL,                                         +
               RESNAME=((2),(4),(5),GENERIC,(3)),                      +
               WAITCNT=(6)
*
         STH   R15,RC                   -save RC from GQSCAN
         CH    R15,=H'4'                -compare RC with 4
         BE    @END                     -exit if RC EQ 4, no matches
         LR    R6,R0                    -save length of RIB
         SRL   R6,16                    -get first halfword
         LR    R7,R0                    -save length of RIBE
         SLL   R7,16                    -clean up R9
         SRL   R7,16                    -clean up R9
         LR    R8,R1                    -save number of ribs returned
         LR    R2,R9                    -
@RIBLOOP EQU   *
         USING RIB,R2                   -map Resourse Information Block
         MVC   MAJOR,RIBQNAME           -set MAJOR name
         L     R3,RIBNRIBE              -load length of RIB extension
         LH    R4,RIBVLEN               -load length of variable area
@RIBVAR  EQU   *
         AR    R2,R6                    -move past RIB
         USING RIBVAR,R2                -load address of variable area
         LA    R0,MINOR                 -load address of MINOR output
         LA    R1,255                   -load length of MINOR output
         LA    R14,RIBRNAME             -load address of MINOR input
         LR    R15,R4                   -load length of MINOR input
         ICM   R15,B'1000',=C' '        -set pad char
         MVCL  R0,R14                   -move
         AR    R2,R4                    -move past variable area
         USING RIBE,R2                  -map RIB extension
@RIBELOP EQU   *
         CLI   STAKFLAG,X'01'
         BE    @NOQUEUE
         MVC   JOBNAME,RIBEJBNM         -set Jobname
         MVC   SYSID,RIBESYSN           -set System ID
         MVI   ENQ,C'E'                 -set default Type
         TM    RIBERFLG,RIBETYPE        -test Type bit
         BZ    @EXCLUS
         MVI   ENQ,C'S'
@EXCLUS  EQU   *
         MVI   STATUS,C'W'              -set default Status
         TM    RIBESFLG,RIBESTAT        -test Status bit
         BZ    @WAITING
         MVI   STATUS,C'H'
@WAITING EQU   *
         $REXX QUEUE,V=QUEUEVAL         -queue record
@NOQUEUE EQU   *
         LA    R11,1(R11)               -add 1 to counter
         AR    R2,R7                    -move to next RIBE
         BCT   R3,@RIBELOP              -branch if any more RIBEs
         BCT   R8,@RIBLOOP              -branch if any more RIBs
         CLC   RC,=H'8'                 -was RC=8
         BE    @SCAN                    -yes, so re-issue GQSCAN
@END     EQU   *
         STORAGE RELEASE,               -release dynamic storage       +
               ADDR=(9),                                               +
               LENGTH=WORKLENT
@RESULT  EQU   *
         $REXX RESULT,                                                 +
               V=(11),                                                 +
               SUBMODE=TOTAL
         XC    RC,RC                    -init RC
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
REGSAVE  DC    A(0)
ONLY     DC    C'ONLY'
NOSTAK   DC    C'NOSTAK'
STAKFLAG DC    XL1'00'
ONLYFLAG DC    XL1'00'
RC       DC    H'0'
RESULT   DC    CL8'00000000'
WORKLENT EQU   32000
TOKENVAL DS    A
SYSDSN   DC    C'SYSDSN'
*
QUEUEVAL DS    CL(QUEUEEND-QUEUESTA)
         ORG   QUEUEVAL
QUEUESTA EQU   *
MAJOR    DC    CL8' '
         DC    CL1' '
JOBNAME  DC    CL8' '
         DC    CL1' '
ENQ      DC    CL1' '
         DC    CL1' '
STATUS   DC    CL1' '
         DC    CL1' '
SYSID    DC    CL4' '
         DC    CL1' '
MINOR    DC    CL255' '
QUEUEEND EQU   *
*
         $REXX INCLUDE
         ISGRIB
         END   ENQLIST
