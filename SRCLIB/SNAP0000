SNAP0000 TITLE ' '
SNAP0000 CSECT
SNAP0000 AMODE 31
SNAP0000 RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
*
         $RPT  R=O00S                   -write header record
         LM    R4,R5,0(R10)             -load address/length
*
         XR    R6,R6                    -zero offset index
         MVI   OUT01F,C' '              -nullify continue flag
         XR    R2,R2                    -zero for divide
         LR    R3,R5                    -load length
         D     R2,=A(L'OUT01EBC)        -divide by length of output
         LTR   R3,R3                    -test for 0 result
         BZ    @FORMAT5                 -branch around
@FORMAT1 EQU   *
         LA    R15,L'OUT01EBC           -set length
         $PERF GO,A=@FORMAT8,L=2
         BCT   R3,@FORMAT1              -loop while remaining
@FORMAT5 EQU   *
         LTR   R2,R2                    -do we have a remainder
         BZ    @EPILOG                  -no so skip
         LR    R15,R2                   -set length
         $PERF GO,A=@FORMAT8,L=2
         B     @EPILOG
@FORMAT8 EQU   *
         LR    R7,R15                   -save length
         LA    R0,OUT01EBC              -load receiver
         LA    R1,L'OUT01EBC            -load length of receiver
         LA    R14,0(R4)                -load sender
         ICM   R15,B'1000',=C' '        -set pad char
         MVCL  R0,R14                   -move text
*
         $CONVERT C2X,                                                 +
               I=OUT01EBC,                                             +
               O=OUT01HEX,                                             +
               MODE=
*
         LR    R15,R7                   -load length
         SLL   R15,1                    -multiply by 2
         LA    R0,OUT01HEX(R15)         -load start address
         LA    R1,L'OUT01HEX            -load length of sender
         SR    R1,R15                   -set for move
         XR    R14,R14                  -zero for move
         XR    R15,R15                  -zero for move
         ICM   R15,B'1000',=C' '        -set pad char
         MVCL  R0,R14                   -clobber unused storage
*
         ST    R6,WORD                  -set offset
         $CONVERT C2D,                  -convert offset to EBCDIC      +
               I=WORD,                                                 +
               O=OUT01O
*
         $RPT  R=O01S                   -write record
         MVI   OUT01F,C'+'              -indicate continue
         LA    R6,L'OUT01EBC(R6)        -add to offset
         $PERF BACK,L=2                 -branch back
*
@EPILOG  $GJNLINK EPILOG
*
WORD     DS    F
*
O00S     DS    CL(O00SZ)
         ORG   O00S
O00SA    EQU   *
         DC    CL1'0'
         DC    CL1' '
         DC    CL6'Offset'
         DC    C' '
         DC    CL10'0.........'
         DC    CL10'1.........'
         DC    CL10'2.........'
         DC    CL10'3.........'
         DC    C' '
         DC    CL20'0...................'
         DC    CL20'1...................'
         DC    CL20'2...................'
         DC    CL20'3...................'
O00SZ    EQU   *-O00SA
*
O01S     DS    CL(O01SZ)
         ORG   O01S
O01SA    EQU   *
         DC    CL1' '
OUT01F   DC    CL1' '
OUT01O   DC    CL6' '
         DC    C' '
OUT01EBC DC    CL40' '
         DC    C' '
OUT01HEX DC    CL80' '
O01SZ    EQU   *-O01SA
*
         END   SNAP0000
