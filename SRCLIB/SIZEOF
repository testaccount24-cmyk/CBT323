SIZEOF   TITLE 'REXX function- return the bytes in a dataset'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Return the bytes in a dataset                      *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
SIZEOF   CSECT
SIZEOF   AMODE 31
SIZEOF   RMODE 24
         PRINT GEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(1,0)         -std REXX entry
*
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(10,44),                                          +
               NB=Y
*
         XC    UCBWAREA,UCBWAREA        -set workarea to low-values
         XC    LRECORDS,LRECORDS
         LA    R8,WORKAREA              -load address of WORKAREA
         USING DS1FMTID,R8              -map DSCB format-1
         LA    R9,UCBAREA               -load address of UCB
         USING UCB,R9                   -map UCB block
*
         LA    R0,DATASET               -load address of dataset
         LA    R1,L'DATASET             -load length of dataset
         LM    R14,R15,0(R11)           -load address/length of args
         ICM   R15,B'1000',=C' '        -set pad char
         MVCL  R0,R14                   -set dataset
*
         LOCATE CAT1                    -look in catalog for dataset
*
         $REXX SAY,V=$ERROR_1,          -display message               +
               RC=20,   '               -set RC=20                     +
               NEXT=@EPILOG,            -exit                          +
               IFRCGT=0                 -only run if RC > 0
*
         MVC    VOLSER,WORKAREA+6
*
         OBTAIN VTOC1                   -lookup VTOC for format-1 DSCB
*
         $REXX SAY,V=$ERROR_2,          -display message               +
               RC=20,   '               -set RC=20                     +
               NEXT=@EPILOG,            -exit                          +
               IFRCGT=0                 -only run if RC > 0
*
         UCBSCAN WORKAREA=UCBWAREA,     -find UCB for DASD volume      +
               UCBAREA=UCBAREA,                                        +
               VOLSER=VOLSER
*
         STM   R9,R11,TEMPSAVE          -save for slack IBM macro
         TRKCALC FUNCTN=TRKCAP,         -establish track capacity      +
               TYPE=UCBTBYT4,           -Unit Type                     +
               R=1,                     -record=1                      +
               K=0,                     -keylength=0                   +
               DD=DS1BLKL               -size of each block
         LM    R9,R11,TEMPSAVE          -restore after macro
*
         LR    R2,R0                    -save blocks/track
         XR    R0,R0                    -zero for divide
         XR    R1,R1                    -zero for insert
         ICM   R1,B'0011',DS1BLKL       -set BLKSIZE from DSCB
         XR    R15,R15                  -zero fir insert
         ICM   R15,B'0011',DS1LRECL     -set LRECL from DSCB
         DR    R0,R15                   -Records/Block
         LR    R3,R1                    -save records/block
*
         XR    R14,R14                  -zero for divide
         XR    R15,R15                  -zero for load
         ICM   R15,B'011',DS1LSTAR      -load TTR of last record
         MR    R14,R2                   -establist total blocks
*
         XR    R1,R1                    -zero for load
         IC    R1,DS1LSTAR+2            -load overhang blocks
         AR    R1,R15                   -add full+overhang
         MR    R0,R3                    -multiply by records
         ST    R1,HRECORDS              -store maximum records
         LTR   R1,R1
         BZ    @LZERO
         SR    R1,R3                    -subtract one block
         ST    R1,LRECORDS
@LZERO   EQU   *
         $CONVERT C2D,                                                 +
               I=HRECORDS,                                             +
               O=RESULT1,                                              +
               MODE=
         $CONVERT C2D,                                                 +
               I=LRECORDS,                                             +
               O=RESULT2,                                              +
               MODE=
         $CONVERT C2D,                                                 +
               I=DS1LRECL,                                             +
               O=RESULT3,                                              +
               MODE=
*
@RESULT  EQU   *
         $REXX RESULT,V=RESULT
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
TEMPSAVE DS    3F
RC       DC    XL1'00'
*
RESULT   DC    CL23' '
         ORG   RESULT
RESULT1  DC    CL8' '
         DC    CL1' '
RESULT2  DC    CL8' '
         DC    CL1' '
RESULT3  DC    CL5' '
*
DATASET  DC    CL44' '
VOLSER   DC    CL6' '
*
HRECORDS DS    F
LRECORDS DS    F
*
CAT1     CAMLST NAME,DATASET,,WORKAREA
VTOC1    CAMLST SEARCH,DATASET,VOLSER,WORKAREA
WORKAREA DC    18CL16' '
UCBWAREA DC    CL200' '
UCBAREA  DC    CL200' '
*
$ERROR_1 $REXX EMSG,V='Unable to locate dataset in OS-Catalog'
$ERROR_2 $REXX EMSG,V='Unable to locate dataset in VTOC'
*
         $REXX INCLUDE
UCB      DSECT
         IEFUCBOB DEVCLAS=ALL,PREFIX=NO  -map of UCB
DCB1     DSECT
         IECSDSL1 1                      -map DSCB format-1
DCB4     DSECT
         IECSDSL1 4                      -map DSCB format-4
         END   SIZEOF
