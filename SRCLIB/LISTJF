LISTJF   TITLE 'REXX function- List current allocations'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Return Allocation info on data stack               *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
LISTJF   CSECT
LISTJF   AMODE 31
LISTJF   RMODE 24
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(1,2)         -std REXX entry
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(1,8),                                            +
               NB=Y
*
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,44),                                           +
               NB=N
         LA    R6,@NOFILTR
         LTR   R14,R14
         BZ    @NOARG1
         LA    R6,@FILTR                -load filter routine address
         MVC   FLTRPARM(4),8(R11)       -load address of filter
         MVC   LENGTHS(4),12(R11)       -load length of filter
@NOARG1  EQU   *
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(NOSTAK),                                         +
               NB=N
         STC   R14,STAKFLAG
         LA    R0,DDNAME
         LA    R1,8
         LM    R14,R15,0(R11)
         ICM   R15,B'1000',=C' '
         MVCL  R0,R14
         MVI   START,X'01'
         XR    R7,R7
         XR    R3,R3
*
@GETJF   EQU   *
         CALL  GJNGETJF,MF=(E,PARMLIST)
*
         LR    R4,R15
         SLL   R4,16
         SRL   R4,16
*
         SRL   R15,16
         LTR   R15,R15
         BZ    @RESULT
         LR    R8,R15
         LA    R9,WORKAREA+4
         USING INFMJFCB,R9
@LOOP    EQU   *
         LA    R3,1(R3)
         BR    R6
@FILTR   EQU   *
         $FINDCHR I=JFCBDSNM
         ST    R15,LENGTHS+4            -store length of DSName
         LA    R1,JFCBDSNM              -load address of DSName
         ST    R1,FLTRPARM+8            -store address of DSName
         L     R1,LENGTHS
         L     R1,LENGTHS+4
         CALL  GJNFLTER,MF=(E,FLTRPARM)
         LTR   R15,R15
         BNZ   @NOQUEUE
@NOFILTR EQU   *
         LA    R7,1(R7)
         CLI   STAKFLAG,X'01'
         BE    @NOQUEUE
         $REXX QUEUE,V=JFCBDSNM,SUBMODE=FSPACE
@NOQUEUE EQU   *
         LA    R9,180(R9)
         BCT   R8,@LOOP
         CR    R7,R4
         BNL   @RESULT
         LA    R1,1(R3)
         STC   R1,START
         B     @GETJF
@RESULT  EQU   *
         $REXX RESULT,                                                 +
               V=(7),                                                  +
               SUBMODE=TOTAL
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
         LTORG
*
RC       DC    F'0'
FLTRPARM CALL  ,(,LENGTHS,,LENGTHS+4),MF=L
LENGTHS  DC    F'0'
         DC    F'0'
*
NOSTAK   DC    C'NOSTAK'
STAKFLAG DC    XL1'00'
*
PARMLIST DS    0F
         DC    A(DDNAME)
         DC    A(START)
         DC    A(WORKLENT)
         DC    A(WORKAREA)
DDNAME   DC    CL8' '
START    DC    XL1'01'
WORKLENT DC    A(30*180)
WORKAREA DC    30CL180' '
*
         $REXX INCLUDE
         IEFJFCBN                    -map of Job File Cont Blk
         END   LISTJF
