LISTDD   TITLE 'REXX function- List current allocations'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Return Allocation info on data stack               *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
LISTDD   CSECT
LISTDD   AMODE 31
LISTDD   RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(0,2)         -std REXX entry
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(0,8),                                            +
               NB=N
         LA    R6,@QUEUE                -load default routine address
         LTR   R14,R14
         BZ    @NOARG1
         LA    R6,@GETLENT              -load filter routine address
         MVC   FLTRPARM(4),0(R11)       -load address of filter
         MVC   LENGTHS(4),4(R11)        -load length of filter
@NOARG1  EQU   *
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(6,6),                                            +
               NB=N
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LIST,                                             +
               PARMS=(NOSTAK),                                         +
               NB=N
         STC   R14,STAKFLAG
@NOARG   EQU   *
         XR    R7,R7                    -initialize counter
         EXTRACT @TIOT,                 -extract TIOT address          +
               'S',                                                    +
               FIELDS=(TIOT)
         L     R9,@TIOT
         USING TIOT1,R9                 -give addressability to TIOT
         LA    R9,TIOENTRY              -get address of first entry
         USING TIOENTRY,R9              -give addressability to entry
         XR    R8,R8                    -zero
@TIOLOOP EQU   *
         IC    R8,TIOELNGH              -load length of TIOT
         LTR   R8,R8                    -test length of entry
         BZ    @RESULT                  -if zeros then leave
         TM    TIOESTTA,TIOSLTYP        -see if this entry empty
         BO    @NEXTDD                  -if so then skip
         CLI   TIOEDDNM,C' '            -see if DD-name is blank
         BE    @NEXTDD                  -branch to next DD
         BR    R6                       -branch to required routine
@GETLENT EQU   *
         $FINDCHR I=TIOEDDNM
         ST    R15,LENGTHS+4            -store length of DDName
         LA    R1,TIOEDDNM              -load address of DDName
         ST    R1,FLTRPARM+8            -store address of DDName
         CALL  GJNFLTER,MF=(E,FLTRPARM)
         LTR   R15,R15
         BNZ   @NEXTDD
@QUEUE   EQU   *
         LA    R7,1(R7)
         CLI   STAKFLAG,X'01'
         BE    @NEXTDD
         $REXX QUEUE,                                                  +
               V=TIOEDDNM,                                             +
               SUBMODE=FSPACE
@NEXTDD  EQU   *
         AR    R9,R8
         B     @TIOLOOP
@RESULT  EQU   *
         $REXX RESULT,V=(7),SUBMODE=TOTAL
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
*
FLTRPARM CALL  ,(,LENGTHS,,LENGTHS+4),MF=L
LENGTHS  DC    F'0'
         DC    F'0'
*
NOSTAK   DC    C'NOSTAK'
STAKFLAG DC    XL1'00'
@TIOT    DS    A(0)
RC       DC    F'0'
RESULT   DS    CL6
TALLY    DC    F'0'
         $REXX INCLUDE
         DSECT
         IEFTIOT1                    -map Task I/O table
         END   LISTDD
