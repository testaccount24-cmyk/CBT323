FINDCHAR TITLE 'REXX function- find the first occurence of a character'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Find the first occurence of a character            *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
FINDCHAR CSECT
FINDCHAR AMODE 31
FINDCHAR RMODE 24
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(2,1)         -std REXX entry
*
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(1,256),                                          +
               NB=Y
         $REXX VER,                                                    +
               A=3,                                                    +
               VTYPE=RANGE,                                            +
               PARMS=(1,9999999),                                      +
               NB=N
*
         LR    R6,R14
         LTR   R14,R14
         BNZ   @ARG3OK
         LA    R6,1
@ARG3OK  EQU   *
         XC    TABLE,TABLE
         LM    R2,R3,8(R11)             -load argument addr/lengths
         XR    R1,R1                    -zero for IC
         LA    R15,X'FF'                -load FF
         LA    R14,TABLE                -load address of table
@LOOP001 EQU   *
         IC    R1,0(R2)                 -load argument
         STC   R15,0(R14,R1)            -store index in table
         LA    R2,1(R2)                 -move to next argument
         BCT   R3,@LOOP001              -branch while chars remain
*
         LM    R8,R9,0(R11)             -load argument addr/lengths
         LR    R7,R8                    -load working address
*
@LOOP002 EQU   *
         LTR   R9,R9                    -check for zero length
         BZ    @NOFOUND                 -if zero then end
         LA    R15,256                  -load maximum length
         CR    R9,R15                   -compare lengths
         BH    @OVER256                 -length if GT 256
         LR    R15,R9                   -load with lower value
@OVER256 EQU   *
         EX    R15,$TEST                -test
         BM    @FOUND                   -process found char
         SR    R9,R15                   -subtract tested value
         AR    R7,R15                   -add to address
         B     @LOOP002                 -branch back to top
@NOFOUND EQU   *
         XR    R3,R3
@RESULT  EQU   *
         $REXX RESULT,                                                 +
               V=(3),                                                  +
               SUBMODE=TOTAL
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
@FOUND   EQU   *
         LR    R2,R1
         SR    R2,R7                    -subtract addresss
         LA    R2,1(R2)                 -adjust
         SR    R9,R2                    -subtract from length
         AR    R7,R2                    -add to length
         BCT   R6,@LOOP002
         SR    R1,R8                    -subtract found address
         LA    R1,1(R1)                 -adjust
         LR    R3,R1
         B     @RESULT
*
*
$TEST    TRT   0(256,R7),TABLE
*
RC       DC    H'0'
RESULT   DC    D'0'
TABLE    DS    XL256
         $REXX INCLUDE
         END   FINDCHAR
