REXXFP   TITLE 'REXX function- return the REXX FP table'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Return the REXX Function table on the data stack   *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
REXXFP   CSECT
REXXFP   AMODE 31
REXXFP   RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(0,0)         -std REXX entry
         LOAD  EP=IRXINIT               -load address of IRXINIT
         LR    R15,R0                   -load entry address
         LA    R1,IRXPARMS              -load address of parm list
         BALR  R14,R15                  -branch to IRXINIT
         L     R1,EVBADDR
         USING ENVBLOCK,R1
         L     R1,ENVBLOCK_PARMBLOCK
         USING PARMBLOCK,R1
         L     R9,PARMBLOCK_PACKTB
         USING PACKTB_HEADER,R9
         XR    R11,R11
         MVC   FPTYPE,=CL6'User'
         LA    R1,0(R9)
         BAL   R8,@TABLR
         MVC   FPTYPE,=CL6'Local'
         LA    R1,12(R9)
         BAL   R8,@TABLR
         MVC   FPTYPE,=CL6'System'
         LA    R1,24(R9)
         BAL   R8,@TABLR
@RESULT  EQU   *
         $REXX RESULT,V=(11),SUBMODE=TOTAL
@EPILOG  $GJNLINK EPILOG,LASTCC=RC
*
@TABLR   EQU   *
         L     R2,0(R1)                 -load first
         L     R3,8(R1)                 -load used
         LTR   R3,R3                    -how many used
         BZR   R8                       -if zero then return
@LOOP1   EQU   *
         LOAD  EPLOC=(2)                -load directory
         LR    R4,R0                    -save module address
         MVC   FPID,0(R4)               -set function package ID
         LM    R5,R6,8(R4)              -load length/total
         L     R7,20(R4)                -load entry length
         LTR   R6,R6                    -test total
         BZ    @NEXT                    -skip
         AR    R4,R5                    -move to first function
@LOOP2   EQU   *
         MVC   FPFUNCT,0(R4)            -set function name
         MVC   FPDD,24(R4)              -set function DD Name
         MVC   FPEP,16(R4)              -set function entry point
         $REXX QUEUE,V=QUEUEVAL         -queue record
         LA    R11,1(R11)               -add 1 to count
         AR    R4,R7                    -move to next function
         BCT   R6,@LOOP2                -loop
@NEXT    EQU   *
         LA    R2,8(R2)                 -move to next dir entry
         BCT   R3,@LOOP1                -loop
         BR    R8                       -return
*
TEMP     DC    F'0'
RC       DC    H'0'
RESULT   DC    CL8'00000000'
HCLEN    EQU   SUBCOMTB_NEXT-SUBCOMTB_NAME
*
QUEUEVAL DS    CL(QUEUESTF-QUEUESTS)
         ORG   QUEUEVAL
QUEUESTS EQU   *
FPTYPE   DC    CL6' '
         DC    CL1' '
FPID     DC    CL8' '
         DC    CL1' '
FPFUNCT  DC    CL8' '
         DC    CL1' '
FPDD     DC    CL8' '
         DC    CL1' '
FPEP     DC    CL8' '
QUEUESTF EQU   *
*
FUNCTION DC    CL8'FINDENVB'
INITMOD  DC    CL8'        '
INITADDR DC    A(0)
USERFLD  DC    A(0)
RESERV   DC    F'0'
EVBADDR  DS    A
REASCODE DS    F
IRXPARMS DS    0H
         DC    A(FUNCTION)
         DC    A(INITMOD)
         DC    A(INITADDR)
         DC    A(USERFLD)
         DC    A(RESERV)
         DC    A(EVBADDR)
         DC    A(REASCODE+X'80000000')
*
         $REXX INCLUDE
         END   REXXFP
