GJNFLTER TITLE 'Compare a string against a pattern'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler                                   *
*    Description: Compare a string against a pattern                 *
*         Author: Gerard J Nicol                                     *
*        Company: Eureka Systems Programming Pty Ltd                 *
*             OS: OS/390 V2.4                                        *
*           Date: October 1997                                       *
*                                                                    *
*---+----1----+----2----+----3----+----4----+----5----+----6----+----7
*
GJNFLTER CSECT
GJNFLTER AMODE 31
GJNFLTER RMODE ANY
         PRINT NOGEN
@PROLOG  EQU   *
         BAKR  R14,0                    -backup registers
         LR    R12,R15                  -load base register
         USING @PROLOG,R12              -give module addressability
         MVI   RC,X'10'                 -set default RC
         LM    R2,R5,0(1)               -load parms
         L     R3,0(R3)                 -load length of fiter
         L     R5,0(R5)                 -load length of string
         USING FILTER,R2                -map filter
         USING STRING,R4                -map string
         LTR   R3,R3                    -see if length of filter is 0
         BNZ   @START                   -if not, then start
         MVI   RC,X'01'                 -set zero filter RC
         B     @EPILOG                  -exit
@START   EQU   *
         LTR   R5,R5                    -see if length is 0
         BZ    @EPILOG                  -if so, then exit
         CLI   FILTERC,NULLCARD         -is filter %
         BE    @SKIP001                 -yes, so dont compare
         CLI   FILTERC,WILDCARD         -is filter *
         BE    @GOWILD                  -yes, so test as wildcard
         CLC   FILTERC,STRINGC          -compare chars
         BNE   @EPILOG                  -if not equal then exit
@SKIP001 EQU   *
         LA    R2,1(R2)                 -move along filter
         LA    R4,1(R4)                 -move along string
         BCTR  R5,0                     -subtract 1 from string length
         BCT   R3,@START                -keep looking is filter OK
         LTR   R5,R5                    -test if string remaining
         BNZ   @EPILOG                  -if so, then exit
         XC    RC,RC                    -if not, then set 0 RC
         B     @EPILOG                  -exit
@GOWILD  EQU   *
         BCTR  R3,0                     -subtract 1 from filter length
         LTR   R3,R3                    -is there any filter left ?
         BNZ   @GOWILD1                 -yes, so look for next char
         XC    RC,RC                    -no, set RC to 0
         B     @EPILOG                  -exit
@GOWILD1 EQU   *
         LA    R2,1(R2)                 -move to next filter char
         CLI   FILTERC,WILDCARD         -is it a wildcard
         BE    @GOWILD                  -yes, so keep looking
@GOWILD2 EQU   *
         CLC   FILTERC,STRINGC          -is this the restart point
         BE    @START                   -yes, so continue normal check
         BCTR  R5,0                     -subtract 1 from string length
         LTR   R5,R5                    -are we at the end
         BNP   @EPILOG                  -yes, so exit
         LA    R4,1(R4)                 -no, move to next char
         B     @GOWILD2                 -keep looking
@EPILOG  EQU   *                        -exit with RC
         SLR   R15,R15                  -zero RC
         IC    R15,RC                   -load RC
         PR    ,                        -return to caller
*
WILDCARD EQU   C'*'
NULLCARD EQU   C'%'
RC       DC    XL1'00'
*
FILTER   DSECT
FILTERC  DS    C
STRING   DSECT
STRINGC  DS    C
*
         YREGS
         END   GJNFLTER
