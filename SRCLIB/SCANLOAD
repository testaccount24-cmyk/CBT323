SCANLOAD TITLE 'REXX function to scan a load module for CSECTS'
*
*---------------------------------------------------------------------*
*                                                                     *
*      Module: SCANLOAD                                               *
*      Author: Gerard Nicol                                           *
* Description:                                                        *
*                                                                     *
*---+----1----+----2----+----3----+----4----+----5----+----6----+----7*
*
SCANLOAD CSECT
SCANLOAD AMODE 31
SCANLOAD RMODE 24
         PRINT GEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=R10    -entry with EFPL in R10
         $REXX ENTRY,ARGS=(2,0)
         $REXX VER,                                                    +
               A=1,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(10,44),                                          +
               NB=Y
         $REXX VER,                                                    +
               A=2,                                                    +
               VTYPE=LENGTH,                                           +
               PARMS=(1,8),                                            +
               NB=Y
*
         LM    R0,R1,0(R11)             -load address/length of DSN
         ICM   R1,B'1000',=C' '         -set pad
         LA    R14,DSN                  -load address of receiver
         LA    R15,L'DSN                -load length
         MVCL  R14,R0                   -move in dataset name
         LM    R0,R1,8(R11)             -load address/length of member
         ICM   R1,B'1000',=C' '         -set pad
         LA    R14,MEMBER               -load address of receiver
         LA    R15,L'MEMBER             -load length
         MVCL  R14,R0                   -move in dataset name
         CALL  GJNDYN00,(DSN,DDNAME),VL -call allocation routine
         LTR   R15,R15                  -test RC
         BNZ   @EPILOG                  -if bad alloc then exit
@ALLOCOK EQU   *
         LA    R1,PDS                   -load address of DCB
         USING IHADCB,R1                -map DCB
         MVC   DCBDDNAM,DDNAME          -set allocated DCB
         OPEN  (PDS,INPUT)              -open PDS
         CALL  GJNMODSC,MF=(E,PARM1)    -call server
         LTR   R15,R15                  -test RC
         BZ    @RCOK                    -RC was 0
         $REXX SAY,V=$ERROR_1,          -display message               +
               RC=20,   '               -set RC=20                     +
               NEXT=@CLOSEUP            -exit
@RCOK    EQU   *
         L     R1,PARM3                 -load address of result
         L     R4,0(R1)                 -load modules returned
         LA    R9,4(R1)                 -move to address of first
@QUEUE   EQU   *
         USING CESD,R9                  -map CSED
         MVC   MODULE,CESDMOD           -move module name
         $CONVERT C2X,                                                 +
               I=CESDADDR,                                             +
               O=OFFSET,                                               +
               MODE=
         $CONVERT C2D,                                                 +
               I=CESDLENT,                                             +
               O=LENGTH,                                               +
               MODE=
         $CONVERT C2X,                                                 +
               I=CESDTYPE,                                             +
               O=TYPE,                                                 +
               MODE=
         $REXX QUEUE,V=QUEUEREC         -queue record
         LA    R9,16(R9)                -move to next record
         BCT   R4,@QUEUE                -loop while remaining
@CLOSEUP EQU   *
         CLOSE PDS                      -close PDS
         CALL  GJNDYN00,(DSN,DDNAME)    -free DD
@EPILOG  EQU   *
         $REXX RESULT,V=(4),            -set result                    +
               SUBMODE=TOTAL
         $GJNLINK EPILOG,LASTCC=RC      -exit with RC
*
RC       DC    H'0'
PARM1    DC    A(PDS)
PARM2    DC    A(MEMBER)
PARM3    DC    A(0)
MEMBER   DS    CL8' '
PDS      DCB   DSORG=PO,                                               +
               MACRF=R,                                                +
               BLKSIZE=32760,                                          +
               RECFM=U
*
QUEUEREC DC    CL30' '
         ORG   QUEUEREC
MODULE   DC    CL8' '
         DC    CL1' '
OFFSET   DC    CL6' '
         DC    CL1' '
LENGTH   DC    CL10' '
         DC    CL1' '
TYPE     DC    CL2' '
         ORG   QUEUEREC+L'QUEUEREC
*
DSN      DC    CL44' '
DDNAME   DC    CL8' '
*
$ERROR_1 $REXX EMSG,V='Unable to find the member specified'
*
         $REXX INCLUDE
         DCBD  DSORG=PO
*
CESD     DSECT
CESDMOD  DS    CL8
CESDTYPE DS    CL1
CESDADDR DS    CL3
         DS    CL1
CESDLENT DS    CL3
*
         END   SCANLOAD
