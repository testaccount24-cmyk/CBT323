SNAP0003 TITLE 'Produce a formatted report of REXX Function Packages'
SNAP0003 CSECT
SNAP0003 AMODE 31
SNAP0003 RMODE ANY
         PRINT NOGEN
@PROLOG  $GJNLINK PROLOG
*
         $RPT  R=O01S                   -print report header
*
         LOAD  EP=IRXINIT               -load address of IRXINIT
         LR    R15,R0                   -load entry address
         LA    R1,IRXPARMS              -load address of parm list
         BALR  R14,R15                  -branch to IRXINIT
*
         L     R1,EVBADDR               -load env block address
         USING ENVBLOCK,R1              -map env block
         L     R1,ENVBLOCK_PARMBLOCK    -load address of parm block
         USING PARMBLOCK,R1             -map parm block
         L     R9,PARMBLOCK_PACKTB      -load package table address
         USING PACKTB_HEADER,R9         -map package table
         MVC   FPTYPE,=CL6'User'        -set User
         LA    R1,0(R9)                 -load user table start point
         BAL   R8,@TABLR                -process user table
         MVC   FPTYPE,=CL6'Local'       -set Local
         LA    R1,12(R9)                -load Local table start point
         BAL   R8,@TABLR                -process Local table
         MVC   FPTYPE,=CL6'System'      -set System table
         LA    R1,24(R9)                -load System table start point
         BAL   R8,@TABLR                -process System table
         $RPT  R=O03S                   -write report footer
@EPILOG  $GJNLINK EPILOG                -branch back to caller
*
@TABLR   EQU   *
         L     R2,0(R1)                 -load first
         L     R3,8(R1)                 -load used
         LTR   R3,R3                    -how many used
         BZR   R8                       -if zero then return
@LOOP1   EQU   *
         LOAD  EPLOC=(2)                -load directory
         LR    R4,R0                    -save module address
         MVC   FPID,0(R4)               -set function package ID
         LM    R5,R6,8(R4)              -load length/total
         L     R7,20(R4)                -load entry length
         LTR   R6,R6                    -test total
         BZ    @NEXT                    -skip
         AR    R4,R5                    -move to first function
@LOOP2   EQU   *
         MVC   FPFUNCT,0(R4)            -set function name
         MVC   FPDD,24(R4)              -set function DD Name
         MVC   FPEP,16(R4)              -set function entry point
         $RPT  R=O02S
         AR    R4,R7                    -move to next function
         BCT   R6,@LOOP2                -loop
@NEXT    EQU   *
         LA    R2,8(R2)                 -move to next dir entry
         BCT   R3,@LOOP1                -loop
         BR    R8                       -return
*
IRXPARMS DS    0H
         DC    A(FUNCTION)
         DC    A(INITMOD)
         DC    A(INITADDR)
         DC    A(USERFLD)
         DC    A(RESERV)
         DC    A(EVBADDR)
         DC    A(REASCODE+X'80000000')
ID       DC    CL8'IRXEXCOM'
FUNCTION DC    CL8'FINDENVB'
INITMOD  DC    CL8'        '
INITADDR DC    A(0)
USERFLD  DC    A(0)
RESERV   DC    F'0'
EVBADDR  DS    A
REASCODE DS    F
*
O01S     DS    CL(O01SZ)
         ORG   O01S
O01SA    EQU   *
         DC    CL1' '
         DC    CL6'Type'
         DC    CL1' '
         DC    CL8'ID'
         DC    CL1' '
         DC    CL8'Function'
         DC    CL1' '
         DC    CL8'DDName'
         DC    CL1' '
         DC    CL8'EPoint'
O01SZ    EQU   *-O01SA
*
O02S     DS    CL(O02SZ)
         ORG   O02S
O02SA    EQU   *
         DC    CL1' '
FPTYPE   DC    CL6' '
         DC    CL1' '
FPID     DC    CL8' '
         DC    CL1' '
FPFUNCT  DC    CL8' '
         DC    CL1' '
FPDD     DC    CL8' '
         DC    CL1' '
FPEP     DC    CL8' '
O02SZ    EQU   *-O02SA
*
O03S     DC    C' --------------End of Section.'
*
         $REXX INCLUDE
         END   SNAP0003
