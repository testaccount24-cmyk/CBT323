RESOLVE  TITLE 'REXX function- resolve variables'
*
**********************************************************************
*                                                                    *
* Component_Type: MVS HL-Assembler REXX Function                     *
*    Description: Resolve variables                                  *
*         Author: Gerard J Nicol                                     *
*           Date: September 1997                                     *
*                                                                    *
*--+----1----+----2----+----3----+----4----+----5----+----6----+----7*  --+----8
*
RESOLVE  CSECT
RESOLVE  AMODE 31
RESOLVE  RMODE ANY
         PRINT GEN
@PROLOG  $GJNLINK PROLOG,PARMPTR=10     -std ALC entry
         $REXX ENTRY,ARGS=(1,0)         -std REXX entry
*
* Load REXX Variable interface routine
*
         LOAD  EP=IRXEXCOM              -load address of interface
         LR    R8,R0                    -save address for calls
*
* Initialize REXX variable interface arguments
*
         XC    SHV,SHV                  -zero work area
         LA    R9,SHV                   -get address of REXX area
         USING SHVBLOCK,R9              -map REXX area
         MVI   SHVCODE,SHVNEXTV         -set indicator for NEXT
         MVC   SHVNAMA,=A(SYMBOL)       -set address
         MVC   SHVVALA,=A(VALUE)        -set address
         MVC   SHVUSER,=A(253)          -set length for Variable
         MVC   SHVBUFL,=A(255)          -set length for buffer
*
* Process each variable
*
         LA    R5,SYMBTTABLEENTRIES     -load address of entry table
         USING SYMBTE,R5                -map to table
         LA    R6,SYMBOLS               -load starting address
         SLR   R7,R7                    -zero number of variables
@LOOP000 EQU   *
         LR    R15,R8                   -load address of routine
         CALL  (15),MF=(E,IRPARMS)      -call interface routine
         TM    SHVRET,SHVLVAR           -test for last variable
         BO    @LOOP001                 -exit loop if last
         TM    SHVRET,SHVTRUNC          -check for truncation
         BO    @LOOP000                 -if truncation then skip
*
         ST    R6,SYMBTESYMBOLPTR       -set pointer to symbol
         MVI   0(R6),X'50'              -set ampersand
         L     R1,SHVNAML               -load length of variable
         EX    R1,$MOVE01               -move variable
         LA    R6,1(R1,R6)              -move past variable
         MVI   0(R6),C'.'               -set terminator
         L     R1,SHVNAML               -load length of variable
         LA    R1,2(R1)                 -establish length
         ST    R1,SYMBTESYMBOLLENGTH    -set length of symbol
*
         LA    R6,1(R6)                 -move past period
         ST    R6,SYMBTESUBTEXTPTR
         L     R1,SHVVALL               -load length of value
         ST    R1,SYMBTESUBTEXTLENGTH
         EX    R1,$MOVE02               -move value
         AR    R6,R1                    -move past value
*
         LA    R5,16(R5)
         LA    R7,1(R7)                 -add 1 to variable count
         CH    R7,=H'101'
         BNH   @LOOP000
         $REXX SAY,V=$ERROR_1,RC=0      -display message
@LOOP001 EQU   *
*
* Set-up for Variable substitution routine
*
         XC    SYMBP(SYMBP_LEN),SYMBP   -zero area
         MVC   SYMBPPATTERN@(8),0(R11)  -set pattern address/length
*
         L     R2,4(R11)                -load length of input
         SLL   R2,3                     -multiply by 8
         STORAGE OBTAIN,LENGTH=(2)      -get storage
         ST    R1,SYMBPTARGET@          -store the address of output
         ST    R0,TLENGTH               -store target length
         ST    R0,TLENGTHB              -store target length
*
         MVC   SYMBPTARGETLENGTH@,=A(TLENGTH)
         MVC   SYMBPRETURNCODE@,=A(RC)
         MVC   SYMBPSYMBOLTABLE@,=A(SYMBT)
*
         XC    SYMBTHEADER,SYMBTHEADER
         STH   R7,SYMBTNUMBEROFSYMBOLS
*
         LINK  EP=ASASYMBM,MF=(E,SYMBP)
*
@RESULT  EQU   *
         L     R2,SYMBPTARGET@
         L     R3,TLENGTH
         $REXX RESULT,                                                 +
               V=0(R2),                                                +
               VL=(R3),                                                +
               SUBMODE=LARGE
*
         L     R3,TLENGTHB
         STORAGE RELEASE,                                              +
               ADDR=(2),                                               +
               LENGTH=(3)
*
@EPILOG  $GJNLINK EPILOG,LASTCC=RC      -exit and set RC
*
         LTORG
$MOVE01  MVC   1(0,R6),SYMBOL
$MOVE02  MVC   0(0,R6),VALUE
$ERROR_1 $REXX EMSG,V='Variable overflow: 100 variables processed'
IRPARMS  CALL  ,(ID,,,SHV),MF=L,VL
TLENGTH  DC    F'0'
TLENGTHB DC    F'0'
ID       DC    CL8'IRXEXCOM'
RC       DC    F'0'
SHV      DC    XL(SHVBLEN)'00'
SYMBOL   DC    CL253' '
VALUE    DC    CL255' '
*
A1       ASASYMBP DSECT=NO,SYMBP=YES,SYMBT=YES,SYMBTE=NO
A2       ASASYMBP DSECT=YES,SYMBP=NO,SYMBT=NO,SYMBTE=YES
*
         DC    103CL(SYMBTE_LEN)'Eureka SP'
SYMBOLS  DC    26300CL1' '
*
         $REXX INCLUDE
         END   RESOLVE
